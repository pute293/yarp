#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'
module YARP
  module Parser
    class OperationParser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    19,    27,     7,     8,     9,    15,    25,    16,    35,    17,
    28,    18,    37,    10,    11,    12,    26,    24,     3,     7,
     8,     9,    15,    36,    16,   nil,    17,   nil,    18,   nil,
    10,    11,    12,    32,    34,     3,     7,     8,     9,    15,
   nil,    16,   nil,    17,   nil,    18,   nil,    10,    11,    12,
    40,    41,    21,     7,     8,     9,    15,   nil,    16,   nil,
    17,   nil,    18,   nil,    10,    11,    12,     7,     8,     9,
    15,   nil,    16,   nil,    17,    38,    18,   nil,    10,    11,
    12,     7,     8,     9,    15,   nil,    16,   nil,    17,    29,
    18,   nil,    10,    11,    12,     7,     8,     9,    15,   nil,
    16,   nil,    17,   nil,    18,   nil,    10,    11,    12 ]

racc_action_check = [
     1,    16,     1,     1,     1,     1,    15,     1,    19,     1,
    16,     1,    28,     1,     1,     1,    15,     5,     1,     0,
     0,     0,     0,    26,     0,   nil,     0,   nil,     0,   nil,
     0,     0,     0,    18,    18,     0,     4,     4,     4,     4,
   nil,     4,   nil,     4,   nil,     4,   nil,     4,     4,     4,
    33,    33,     4,    34,    34,    34,    34,   nil,    34,   nil,
    34,   nil,    34,   nil,    34,    34,    34,    30,    30,    30,
    30,   nil,    30,   nil,    30,    30,    30,   nil,    30,    30,
    30,    17,    17,    17,    17,   nil,    17,   nil,    17,    17,
    17,   nil,    17,    17,    17,    41,    41,    41,    41,   nil,
    41,   nil,    41,   nil,    41,   nil,    41,    41,    41 ]

racc_action_pointer = [
    17,     0,   nil,   nil,    34,    -2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     0,    -7,    79,    21,     8,
   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,     4,   nil,
    65,   nil,   nil,    38,    51,   nil,   nil,   nil,   nil,   nil,
   nil,    93,   nil,   nil ]

racc_action_default = [
    -1,   -30,    -2,    -4,   -30,   -17,    -7,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -30,   -30,   -30,   -30,   -30,
    -3,    -5,    -8,   -17,    -6,   -18,   -30,   -19,   -30,   -22,
   -30,   -24,   -26,   -30,   -30,    44,   -20,   -21,   -23,   -25,
   -27,   -30,   -28,   -29 ]

racc_goto_table = [
    22,     2,    20,     5,     5,     1,    30,    33,   nil,   nil,
   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,
    42,   nil,   nil,   nil,   nil,   nil,   nil,    43 ]

racc_goto_check = [
     5,     2,     2,     4,     4,     1,     8,     9,   nil,   nil,
   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,
     5,   nil,   nil,   nil,   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,     5,     1,   nil,     3,    -4,   nil,   nil,   -11,   -11 ]

racc_goto_default = [
   nil,   nil,   nil,     4,    23,     6,    13,    14,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 21, :_reduce_1,
  1, 21, :_reduce_2,
  2, 21, :_reduce_3,
  1, 22, :_reduce_4,
  2, 22, :_reduce_5,
  2, 22, :_reduce_6,
  1, 23, :_reduce_7,
  2, 23, :_reduce_8,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  1, 25, :_reduce_none,
  2, 26, :_reduce_18,
  2, 26, :_reduce_19,
  3, 26, :_reduce_20,
  3, 26, :_reduce_21,
  2, 27, :_reduce_22,
  3, 27, :_reduce_23,
  1, 28, :_reduce_24,
  2, 28, :_reduce_25,
  2, 24, :_reduce_26,
  3, 24, :_reduce_27,
  2, 29, :_reduce_28,
  3, 29, :_reduce_29 ]

racc_reduce_n = 30

racc_shift_n = 44

racc_token_table = {
  false => 0,
  :error => 1,
  :PDF_TRUE => 2,
  :PDF_FALSE => 3,
  :PDF_NULL => 4,
  :PDF_STRL_L => 5,
  :PDF_STRL_R => 6,
  :PDF_STRH_L => 7,
  :PDF_STRH_R => 8,
  :PDF_ARRAY_L => 9,
  :PDF_ARRAY_R => 10,
  :PDF_DICT_L => 11,
  :PDF_DICT_R => 12,
  :PDF_NAME => 13,
  :PDF_NUM_INT => 14,
  :PDF_NUM_REAL => 15,
  :PDF_STR_ASCII => 16,
  :PDF_STR_HEX => 17,
  :PDF_OP => 18,
  :PDF_OP_ID => 19 }

racc_nt_base = 20

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "PDF_TRUE",
  "PDF_FALSE",
  "PDF_NULL",
  "PDF_STRL_L",
  "PDF_STRL_R",
  "PDF_STRH_L",
  "PDF_STRH_R",
  "PDF_ARRAY_L",
  "PDF_ARRAY_R",
  "PDF_DICT_L",
  "PDF_DICT_R",
  "PDF_NAME",
  "PDF_NUM_INT",
  "PDF_NUM_REAL",
  "PDF_STR_ASCII",
  "PDF_STR_HEX",
  "PDF_OP",
  "PDF_OP_ID",
  "$start",
  "pdf_ops",
  "pdf_op",
  "pdf_values",
  "pdf_dict",
  "pdf_value",
  "pdf_str",
  "pdf_array",
  "pdf_array_content",
  "pdf_dict_pairs" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'ops.y.rb', 19)
  def _reduce_1(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 20)
  def _reduce_2(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 21)
  def _reduce_3(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 22)
  def _reduce_4(val, _values, result)
     result = {:op => val[0][0], :args => nil} 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 24)
  def _reduce_5(val, _values, result)
                                                                  size, op, expected_size = val[0].size, *val[1]
                                                              case size <=> expected_size
                                                              when -1 # operands count is too short
                                                                on_error("parse error on Op #{op}; invalid operands count #{size} (#{val[0]}); expected #{expected_size}")
                                                              when 0  # ok
                                                              when 1  # operands count is too long
                                                                # PDF spec says "operands shall not be left over when an operator finishes execution."
                                                                # So excess parameters are ignored here.
                                                                warn "excess #{size - expected_size} parameters (#{val[0][expected_size..-1]}) ignored"
                                                                val[0] = val[0][0,expected_size]
                                                              when nil # variable parameter allowed
                                                              end
                                                              result = {:op => op, :args => val[0]}
                                                            
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 39)
  def _reduce_6(val, _values, result)
     result = {:op => :ID, :args => val[0], :data => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 40)
  def _reduce_7(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 41)
  def _reduce_8(val, _values, result)
     result << val[1] 
    result
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

module_eval(<<'.,.,', 'ops.y.rb', 51)
  def _reduce_18(val, _values, result)
     retult = '' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 52)
  def _reduce_19(val, _values, result)
     retult = '' 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 53)
  def _reduce_20(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 54)
  def _reduce_21(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 55)
  def _reduce_22(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 57)
  def _reduce_23(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 58)
  def _reduce_24(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 59)
  def _reduce_25(val, _values, result)
     result << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 60)
  def _reduce_26(val, _values, result)
     result = {} 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 61)
  def _reduce_27(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 62)
  def _reduce_28(val, _values, result)
     result = { val[0] => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'ops.y.rb', 63)
  def _reduce_29(val, _values, result)
     result[val[1]] = val[2] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class OperationParser
    end   # module Parser
  end   # module YARP
